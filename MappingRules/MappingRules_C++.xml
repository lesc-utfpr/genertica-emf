<?xml version="1.0" encoding="utf-8"?>
<Platforms>
  <!--**********************************************************************-->
  <!--*          Configuration for RT-FemtoJava Platform                   *-->
  <!--*          source code generation for C++                                     *-->
  <!--**********************************************************************-->
  <RT-FemtoJava>
    <!-- Mapping rules for APPLICATION CODE -->
    <Application>
      <Software>
        <!-- Source code generation options -->
        <SourceOptions isAspectLanguage="no" ClassesPerFile="1" 
                       hasClassesDeclaration="yes" Identation="5"
                       BlockStart="{" BlockEnd="}">
          <FileNameConvention>$Class.Name</FileNameConvention>
          <Package></Package>
          <SourceReference>#include ""</SourceReference>
          <SourceOrganization>
            <DeclarationFile FileExtension=".h">
              $SourceCode.ClassesDeclaration
            </DeclarationFile>
            <ImplementationFile FileExtension=".cc">
			$SourceCode.PackagesDeclaration
			\n$SourceCode.ReferencesDeclaration
			\n$SourceCode.ClassesImplementation
            </ImplementationFile>
          </SourceOrganization>
        </SourceOptions>
        
        
        <!-- Mapping rules for PRIMARY ELEMENTS -->
        <PrimaryElementsMapping>
          <DataTypes>
            <Array>
			  $CodeGenerator.getDataTypeStr($DataType.DataType)
            </Array>
            <Boolean>bool</Boolean>
            <Byte>short int</Byte>
            <Char>char</Char>
            <Class>$DataType.Represent.Name*</Class>
            <DateTime>DateTime</DateTime>
            <Enumeration>
              enum $DataType.Name 
              $Options.BlockStart 
              #foreach ($v in $DataType.Values)
                #if ($velocityCount > 1) , #end
                \n$v
              #end
              \n$Option.BlockEnd
            </Enumeration>
            <Integer>int</Integer>
            <Long>long int</Long>
            <Short>short int</Short>
            <String>string</String>
            <Void>void</Void>
            <Double>double</Double>
            <Float>float</Float>
          </DataTypes>
          <Visibilities>
            <Private>private</Private>
            <Protected>protected</Protected>
            <Public>public</Public>
          </Visibilities>
          <ParameterKinds>
            <In></In>
            <Out></Out>
            <InOut></InOut>
          </ParameterKinds>
        </PrimaryElementsMapping>
        
        
        <!-- Mapping rules for CLASSES -->
        <Classes>
          <Declaration>
		    #set( $uh = '_h' )
			#ifndef $Class.Name$uh
			\n#define $Class.Name$uh
			\n
			\nclass $Class.Name 
            #if ($Class.SuperClass) 
              : public $Class.SuperClass.Name 
            #end
            \n$Options.BlockStart
			\nprotected:
            \n$CodeGenerator.getAttributesDeclaration(1)
            \n
            \n$CodeGenerator.getMessagesDeclaration(1)
            \n$Options.BlockEnd
			;
			\n
			\n#endif
			\n
		  </Declaration>
          
          <Implementation>
		  #set( $ph = '.h' )
		  \#include &quot;$Class.Name$ph&quot; 
		  \n
		  \n
		  \n$CodeGenerator.getMessagesImplementation(1)
		  \n
		  </Implementation>
          
          <Attributes>
            #if ($Attribute.isStatic())
              static
            #end
            $DataTypeStr $Attribute.Name;
          </Attributes>
          
          <Messages>
            <Declaration>
			#if($Message.getOwnerClass().isAbstract())
				virtual 
			#end
            $ReturnTypeStr 
            ${Message.Name}(
              #if ($Message.ParametersCount > 0)
                #foreach( $param in $Message.Parameters )
                  #if ($velocityCount > 1), #end
                  $CodeGenerator.getDataTypeStr($param.DataType) $param.Name
                #end
              #end
			);	
			</Declaration>
            <Implementation>
              $ReturnTypeStr 
			  $Class.Name::
              ${Message.Name}(
              #if ($Message.ParametersCount > 0)
                #foreach( $param in $Message.Parameters )
                  #if ($velocityCount > 1), #end
                  $CodeGenerator.getDataTypeStr($param.DataType) $param.Name
                #end
              #end
              ) $Options.BlockStart
                 \n// Variables
                 \n$CodeGenerator.getVariablesDeclaration(1)
                 \n// Actions
                 \n$CodeGenerator.getActionsCode(1)
              \n$Options.BlockEnd
            </Implementation>
          </Messages>
        </Classes>
        
        
        <!-- Mapping rules for BEHAVIOR, i.e. sequence of actions -->
        <Behavior>
          <VariableDeclaration>
            $DataTypeStr $Variable.Name;
          </VariableDeclaration>
          
          <Branch>
            if ( $Branch.EnterCondition ) $Options.BlockStart 
              #set( $ident = $IdentationLevel + 0) 
              \n$CodeGenerator.getVariablesDeclaration($ident) 
              \n$CodeGenerator.getActionsCode($ident) 
            \n$Options.BlockEnd 
            #if ( $Branch.hasAlternativeBehavior() ) 
              \n else $Options.BlockStart 
                \n$CodeGenerator.getVariablesDeclaration($Branch.AlternativeBehavior, $ident) 
                \n$CodeGenerator.getActionsCode($Branch.AlternativeBehavior, $ident) 
              \n$Options.BlockEnd 
            #end
          </Branch>
          
          <Loop>
            #if ($Loop.NumberOfRepetitions > 0) 
               for(int $IndexVariableName = 0; $IndexVariableName &lt; $Loop.NumberOfRepetitions; $IndexVariableName++) 
            #elseif ($Loop.ExitCondition) 
              #if ($Loop.EnterCondition)
                 ${Loop.EnterCondition}; 
              #end  
              \nwhile ($Loop.ExitCondition) 
            #end 
            $Options.BlockStart 
               \n$CodeGenerator.getVariablesDeclaration(1) 
               \n$CodeGenerator.getActionsCode(1) 
            \n$Options.BlockEnd
          </Loop>
          
          <Assignment>
            #if ($Action.isVariableAssignment())
              $Action.Variable.Name 
            #else
              #if ($Action.Object)
                 ${Action.Object.Name}.${Action.Attribute.Name} 
              #else
                 ${Action.Attribute.Name} 
              #end
            #end
            = 
            #if ($Action.isAssignmentOfValue())
              $Action.Value; 
            #else
              $CodeGenerator.getActionCode($Action.Action)
            #end
          </Assignment>
          
          <Object>
            <Creation>
              #set( $x = 'nada' )
              new ${Action.Object.InstanceOf.Name}(
              #if ($Action.ParametersValuesCount > 0)
                #foreach( $x in $Action.ParametersValues )
                  #if ($velocityCount > 1), #end
                  $x
                #end
              #end
              );
            </Creation>
            
            <Destruction></Destruction>
          </Object>
          
          <Expression>$Action.Expression</Expression>
          
          <Return>
            return 
            #if ($Action.isAssignmentOfValue()) 
              ${Action.Value} 
            #elseif ($Action.isAttributeAssignment()) 
              ${Action.Attribute.Name} 
            #else 
              $CodeGenerator.getActionCode($Action.Action) 
            #end
            ;
          </Return>
          
          <StateChange></StateChange>
          
          <SendMessage>
            <ToLocal>
              <Software>
                #if ($Action.getToObject() != $Action.getFromObject())
                  ${Action.ToObject.Name}->
                #end
                ${Action.RelatedMethod.Name}(
                #if ($Action.ParametersValuesCount > 0)
                  #foreach($param in $Action.getParametersValues())
                    #if ($velocityCount > 1), #end
                    #set( $x =  $velocityCount - 1)
                    #if ($Action.isParameterValue($x))
                      ${param}
                    #else
                      ${param.Name}
                    #end
                  #end
                #end
                );
              </Software>
              <Hardware></Hardware>
            </ToLocal>
            
            <ToRemote>
              <Software>
                #if ($Action.getToObject() != $Action.getFromObject())
                  ${Action.ToObject.Name}->
                #end
                ${Action.RelatedMethod.Name}(
                #if ($Action.ParametersValuesCount > 0)
                  #foreach($param in $Action.getParametersValues())
                    #if ($velocityCount > 1), #end
                    $param
                  #end
                #end
                );
              </Software>
              <Hardware></Hardware>
            </ToRemote>
          </SendMessage>
        </Behavior>
        
        
        <!-- Mapping rules for INTERRUPT HANDLING code -->
        <InterruptHandling>
        </InterruptHandling>
        
        <!-- Mapping rules for DERAF ASPECTS -->
        <Aspects>
          <PeriodicTiming>
            <Declaration></Declaration>
            <Adaptations>
              <Structural Name="Period" Order="1" ModelLevel="no">
                \nprivate static RelativeTime _Period = new RelativeTime(0,0,0);
                \nprivate static PeriodicParameters _PeriodicParams = new PeriodicParameters(null, null, null, null, null);
              </Structural>
              <Structural Name="ModifyConstructor" Order="1" ModelLevel="yes">
                $Message.addParameter("pPeriod", $DERCSFactory.newInteger(false), $DERCSFactory.getParameterIn());
              </Structural>
              <Behavioral Name="SetupPeriod" Order="2" ModelLevel="no">
                \n_Period.set(0,pPeriod,0);
                \n_PeriodicParams.setPeriod(_Period);
                \nsetReleaseParameters(_PeriodicParams);
              </Behavioral>
              <Behavioral Name="FrequencyControl" Order="3" ModelLevel="no">
                waitForNextPeriod();
              </Behavioral>
              <Behavioral Name="LoopMechanism" Order="4" ModelLevel="no">
                while (isRunning()) $Options.BlockStart
                  \n$CodeGenerator.getGeneratedCodeFragment(1)
                \n$Options.BlockEnd
              </Behavioral>
              <Behavioral Name="AdaptObjectConstruction" Order="1" ModelLevel="yes">
                ##set( $x = $Crosscutting.getInformationByName("Period"))    
                ##$Action.getParameterValue(1) 
                $Action.addParameterValue( $Crosscutting.getValueOf("Period") ) 
                ##$Action.addParameterValue( "Period" )
              </Behavioral>
            </Adaptations>
          </PeriodicTiming>
          
          <TimingAttributes>
            <Declaration></Declaration>
            <Adaptations>
              <Structural Name="Deadline" Order="3" ModelLevel="no">
                private static RelativeTime _Deadline = new RelativeTime(0,0,0);
              </Structural>
              <Structural Name="Priority" Order="3">
              </Structural>
              <Structural Name="WCET" Order="3" ModelLevel="no">
                private static RelativeTime _Cost = new RelativeTime(0,0,0);
              </Structural>
              <Structural Name="ModityClassStructure" Order="0" ModelLevel="yes">
                $Class.setSuperClass($DERCSFactory.newClass("RealtimeThread", null, true))
              </Structural>
              <Structural Name="ModifyConstructor" Order="0" ModelLevel="yes">
                $Message.addParameter("pDeadline", $DERCSFactory.newInteger(false), $DERCSFactory.getParameterIn());
                $Message.addParameter("pCost", $DERCSFactory.newInteger(false), $DERCSFactory.getParameterIn());
              </Structural>
              <Behavioral Name="SetupTimingAttributes" Order="2" ModelLevel="no">
                \n_Deadline.set(0,pDeadline,0);
                \n_Cost.set(0,pCost,0);
                \ngetReleaseParameters().setDeadline(pDeadline);
                \ngetReleaseParameters().setCost(pCost);
              </Behavioral>
              <Behavioral Name="AdaptObjectConstruction" Order="0" ModelLevel="yes">
                $Action.addParameterValue( $Crosscutting.getValueOf("Deadline") ) 
                $Action.addParameterValue( $Crosscutting.getValueOf("WCET") ) 
              </Behavioral>
            </Adaptations>
          </TimingAttributes>
          
          <DataFreshness>
            <Declaration></Declaration>
            <Adaptations>
              <Structural Name="ValidityInformation" Order="0" ModelLevel="no">
                // freshness: ${Attribute.Name}
                \nprivate static AbsoluteTime ${Attribute.Name}_Validity = new AbsoluteTime(0,0,0);
                \nprivate static AbsoluteTime ${Attribute.Name}_NextValidity = new AbsoluteTime(0,0,0);
                \n
                \npublic boolean set${Attribute.Name}Validity(int newValidity) $Options.BlockStart
                \n   ${Attribute.Name}_Validity.set(0,newValidity,0);
                \n$Options.BlockEnd
                \n//freshness: ${Attribute.Name}
                \n
              </Structural>
              <Structural Name="SetupValidity" Order="0" ModelLevel="no">
                #set( $ObjName = '---')
                #if ($Action.isVariableAssignment())
                   #set( $ObjName = $Action.Variable.Name )
                #elseif ($Action.Object)
                   #set( $ObjName = $Action.Object.Name + '.' + $Action.Attribute.Name)
                #else
                   #set( $ObjName = $Action.Attribute.Name)
                #end
                // begin of freshness setup
                \n
                #foreach( $NFR in $Action.Action.Object.NFRofAttributes )
                  #if ($NFR.Validity != -1)
                     \n${ObjName}.set${NFR.Attribute.Name}Validity($NFR.Validity); // freshness
                     \n
                  #end
                #end 
                \n// end of freshness setup
              </Structural>
              <Behavioral Name="VerifyFreshness" Order="0" ModelLevel="no">
                if (${Message.AssociatedAttribute.Name}_NextValidity.compareTo(Clock.getTime()) >= 0) $Options.BlockStart
                  \n$CodeGenerator.getGeneratedCodeFragment(1)
                \n$Options.BlockEnd
                \nelse $Options.BlockStart
                \n  ${Message.AssociatedAttribute.Name} = ${Message.AssociatedAttribute.Name} * 0.9; 
                \n$Options.BlockEnd
              </Behavioral>
              <Behavioral Name="UpdateFreshness" Order="0" ModelLevel="no">
                \n${Message.AssociatedAttribute.Name}_NextValidity.set(Clock.getTime());
                \n${Message.AssociatedAttribute.Name}_NextValidity.add(${Message.AssociatedAttribute.Name}_Validity);
              </Behavioral>
            </Adaptations>
          </DataFreshness>
          
          <SchedulingSupport>
            <Declaration></Declaration>
            <Adaptations>
              <Structural Name="Scheduler" Order="0" ModelLevel="no">
                public static EDFScheduler scheduler = new EDFScheduler();
              </Structural>
              <Behavioral Name="SetupConcurrentActivities" Order="0" ModelLevel="no">
                \n
                \nScheduler.setDefaultScheduler(scheduler);
                \n 
                #foreach( $Obj in $Message.TriggeredBehavior.BeharioralElements)
                   #if ($DERCSHelper.isAssignmentOfActiveObject($Obj))
                      #if ($Action.isVariableAssignment())
                         #set( $ObjName = $Obj.Variable.Name )
                      #elseif ($Obj.Object)
                         #set( $ObjName = $Obj.Object.Name + '.' + $Obj.Attribute.Name)
                      #else
                         #set( $ObjName = $Obj.Attribute.Name)
                      #end
                      \n
                      \n${ObjName}.addToFeasibility();
                      \n${ObjName}.start();
                      \n
                   #end
                #end
                \n
                \nscheduler.setupTimer();
                \nidleTask();
              </Behavioral>
            </Adaptations>
          </SchedulingSupport>
          
          <ConcurrentAccessControl>
            <Declaration></Declaration>
            <Adaptations>
              <Structural Name="ConcurrencyControlMechanism" Order="0" ModelLevel="no"></Structural>
              <Behavioral Name="AquireAccess" Order="0" ModelLevel="no"></Behavioral>
              <Behavioral Name="ReleaseAccess" Order="0" ModelLevel="no"></Behavioral>
            </Adaptations>
          </ConcurrentAccessControl>
	</Aspects>
      </Software>
      
      <Hardware></Hardware>
	</Application>
    
    
    <!-- Mapping rules for PLATFORM CODE -->
    <PlatformConfiguration>
      <Software>
        <SourceOptions OutputDirectory="platform"></SourceOptions>
        <Files xmlns:xi="http://www.w3.org/2001/XInclude">
          <xi:include href=".\platform_RT-FemtoJava\Scheduler.xml"/>
          <xi:include href=".\platform_RT-FemtoJava\AbsoluteTime.xml"/>
          <xi:include href=".\platform_RT-FemtoJava\HighResolutionTime.xml"/>
          <xi:include href=".\platform_RT-FemtoJava\RelativeTime.xml"/>
		  <xi:include href=".\platform_RT-FemtoJava\_SCLConfig.xml"/>
        </Files>
      </Software>
      <Hardware>
	  </Hardware>   
	</PlatformConfiguration>
  </RT-FemtoJava>

  
  <!--**********************************************************************-->
  <!--*          Configuration for DREAMS Platform                         *-->
  <!--**********************************************************************-->
  <Dreams></Dreams>
</Platforms>