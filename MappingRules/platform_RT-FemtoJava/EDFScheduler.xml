<File Name="EDFScheduler.java" OutputDirectory="saito.sashimi.realtime" Aspects="SchedulingSupport">
  <Fragment>
	package saito.sashimi.realtime;
	
	import saito.sashimi.*;
	
	
	public class EDFScheduler extends Scheduler {
	
		private static AbsoluteTime nxtTaskActivationTime = new AbsoluteTime(0,0,0);
		private static AbsoluteTime preemptTaskActivationTime = new AbsoluteTime(0,0,0);
		private static AbsoluteTime auxTaskActivationTime = new AbsoluteTime(0,0,0);
		private static AbsoluteTime aux2TaskActivationTime = new AbsoluteTime(0,0,0);
		
		public boolean isFeasible() {
			return true;
		}
		protected int getContextOffsetForStaticMethod() { return 14; }
		protected int getContextOffsetForVirtualMethod() { return 16; };
	
		public void runScheduler() {
			// Disable timer first !
			FemtoJavaInterruptSystem.setEnable(0x6A); //x1101010
			FemtoJavaTimer.stopTimer0();
			
			// The initSystem() context must be saved in the first runScheduler() call
	//        if (m_MainBaseStackPointer == 0xFFFF)
			if (m_currentTask == -1)
				saveMainContext();
			else
				if (m_PeriodicTaskList[m_currentTask] != null)
				{
  </Fragment>
  <Fragment Aspects="PeriodicTiming">
					// verify deadline misses
					auxTaskActivationTime.set(m_PeriodicTaskList[m_currentTask].getResumeTime());
					auxTaskActivationTime.add(m_PeriodicTaskList[m_currentTask].getReleaseParameters().getDeadline());
  </Fragment>
  <Fragment>
					if (auxTaskActivationTime.compareTo(Clock.getTime()) &lt; 0)
					{
  </Fragment>
  <Fragment Aspects="PeriodicTiming">
						// The task deadline was missed
						processDeadlineMisses(m_PeriodicTaskList[m_currentTask]);
						// reinitialize task stack
						m_PeriodicTaskList[m_currentTask].initializeStack();
					}
					else
					{
						// save current task context
						m_PeriodicTaskList[m_currentTask].saveContext();
						// Advise current task that it will lose the context
						m_PeriodicTaskList[m_currentTask].loseContext();
					}
  </Fragment>
  <Fragment>
				}
			
			// try to find the next task to be scheduled
			int nextTask = -1;
			AbsoluteTime auxResumeTime = null;
  </Fragment>
  <Fragment Aspects="PeriodicTiming">
			// find first valid task
			for(int i=0; (nextTask == -1) &amp;&amp; (i &lt;m_PeriodicListCount); i++)
			{
				auxResumeTime = m_PeriodicTaskList[i].getResumeTime(); // only object reference to increase algorithm performance
				if (m_PeriodicTaskList[i].isStarted()
					&amp;&amp; !m_PeriodicTaskList[i].isBlocked()
					&amp;&amp; !m_PeriodicTaskList[i].isFinished()
					// verify if the task can be scheduled
					&amp;&amp; (auxResumeTime.compareTo(Clock.getTime()) &lt;= 0))
				{
					nextTask = i;
					nxtTaskActivationTime.set(auxResumeTime);
					nxtTaskActivationTime.add(m_PeriodicTaskList[nextTask].getReleaseParameters().getDeadline());
				}
			}
  </Fragment>
  <Fragment>        
			if (nextTask != -1)
			{
  </Fragment>
  <Fragment Aspects="PeriodicTiming">
				// compare founded task with other tasks 
				int i = nextTask + 1;
				for(; i &lt; m_PeriodicListCount; i++)
				{
					// only object reference to increase algorithm performance
					auxResumeTime = m_PeriodicTaskList[i].getResumeTime(); 
					if (m_PeriodicTaskList[i].isStarted()
						&amp;&amp; !m_PeriodicTaskList[i].isBlocked()
						&amp;&amp; !m_PeriodicTaskList[i].isFinished()
						// Verify if the task can be scheduled
						&amp;&amp; (auxResumeTime.compareTo(Clock.getTime()) &lt;= 0))
					{
						auxTaskActivationTime.set(auxResumeTime);
						auxTaskActivationTime.add(m_PeriodicTaskList[i].getReleaseParameters().getDeadline());
						if (auxTaskActivationTime.compareTo(nxtTaskActivationTime) &lt; 0)
						{
							nextTask = i;
							nxtTaskActivationTime.set(auxTaskActivationTime);
						}
					}
				}
  </Fragment>
  <Fragment>
			}
			if (nextTask != -1) 
			{
  </Fragment>
  <Fragment Aspects="PeriodicTiming">
			if (nextTask &lt; m_PeriodicListCount) {
  </Fragment>
  <Fragment>        
				int preemptTask = findPreemptTask(nextTask);
				// if the task that will preempt next task is less than Clock.getTime()
				// then the preempt task will be the next task to be executed
				if ((preemptTask != -1) &amp;&amp; !preemptTaskActivationTime.isGreaterThanZero())
					nextTask = preemptTask;
				
				// retore next task context
				if (m_currentTask != nextTask)
				{
	//        		int xpto = m_currentTask; // MAW.DEBUG
					m_currentTask = nextTask;
					m_PeriodicTaskList[nextTask].restoreContext();
	//        		if (xpto != -1) //MAW.DEBUG
	//        			__Simulation.changeContext(xpto, nextTask, !m_PeriodicTaskList[xpto].isFinished()); //MAW.DEBUG
	//        		else //MAW.DEBUG
	//        			__Simulation.changeContext(xpto, nextTask, !m_PeriodicTaskList[m_currentTask].isFinished()); //MAW.DEBUG
				}
				else // Maybe this "else" can be deleted !
				{
					m_PeriodicTaskList[nextTask].restoreContext();
	//        		__Simulation.changeContext(nextTask, nextTask, !m_PeriodicTaskList[nextTask].isFinished()); //MAW.DEBUG
				}
			}
  </Fragment>
  <Fragment Aspects="PeriodicTiming">
			}
  </Fragment>
  <Fragment>
			else
			{
				// don't have any task to be scheduled, so the initSystem() context must be restored
				if (!isAllTasksFinished())
				  programSchedulerTimer();
	//        	else //MAW.DEBUG
	//        		FemtoJava.wakeUp(); //MAW.DEBUG
				m_currentTask = -1;
				restoreMainContext();
			}	
		}
		
		protected void processDeadlineMisses(RealtimeThread task)
		{
			// A deadline was missed !
			task.exceptionTask();
  </Fragment>
  <Fragment Aspects="PeriodicTiming">
			// try to synchronize the current Time with task next Resume Time
			if (task.getReleaseParameters() instanceof PeriodicParameters)
			{
				while (task.getResumeTime().compareTo(Clock.getTime()) &lt; 0)
					task.setNextPeriodResumeTime();
			}
			else
			{
  </Fragment>
  <Fragment>
	
				// The aperiodic task are removed from Task List
				removeFromFeasibility(task);
				m_currentTask = -1;
  </Fragment>
  <Fragment Aspects="PeriodicTiming">
			}
  </Fragment>
  <Fragment>
		}
		
		protected int findPreemptTask(int nextTask)
		{
			// try to find if an task will preempt the next task to be scheduled
			aux2TaskActivationTime.set(Clock.getTime());
  </Fragment>
  <Fragment Aspects="PeriodicTiming">
			aux2TaskActivationTime.add(m_PeriodicTaskList[nextTask].getReleaseParameters().getCost());
			// Verify if the next task was executed and preempted by other task, so the 
			// previous execution time must be subtracted from the task WCET
			aux2TaskActivationTime.subtract(m_PeriodicTaskList[nextTask].getPreviousProcessTime());
			
			int i = 0;
			int preemptTask = -1;
			for(; i &lt; m_PeriodicListCount; i++)
			{
				if ((i != nextTask)
					&amp;&amp; m_PeriodicTaskList[i].isStarted()
					&amp;&amp; !m_PeriodicTaskList[i].isBlocked()
					&amp;&amp; !m_PeriodicTaskList[i].isFinished())
				{
					auxTaskActivationTime.set(m_PeriodicTaskList[i].getResumeTime());
					auxTaskActivationTime.add(m_PeriodicTaskList[i].getReleaseParameters().getDeadline());
					
					if ((auxTaskActivationTime.compareTo(aux2TaskActivationTime) &lt; 0)
						&amp;&amp; ((preemptTask == -1) || (auxTaskActivationTime.compareTo(preemptTaskActivationTime) &lt; 0)))
					{
						preemptTask = i;
						//MAW.1 - Escalonador FUNCIONAVA, se nao funcionar reverter alteracoes
						//MAW.1 - preemptTaskActivationTime.set(m_PeriodicTaskList[i].getResumeTime());
						preemptTaskActivationTime.set(auxTaskActivationTime); //MAW.1
					}
				}
			}
			if (preemptTask == -1)
			{
				// if none task will preempt the next task then timeout represents the next task deadline
				preemptTaskActivationTime.set(m_PeriodicTaskList[nextTask].getResumeTime());
				preemptTaskActivationTime.add(m_PeriodicTaskList[nextTask].getReleaseParameters().getDeadline());
			}
			else
				preemptTaskActivationTime.set(m_PeriodicTaskList[preemptTask].getResumeTime()); //MAW.1
  </Fragment>
  <Fragment>
			preemptTaskActivationTime.subtract(Clock.getTime());
			if (preemptTaskActivationTime.isGreaterThanZero())
			{
				// set and active scheduler timer
				FemtoJavaInterruptSystem.setEnable(0x2A);
				FemtoJavaTimer.setTimer0(preemptTaskActivationTime.convertToFJTimeoutValue());
				FemtoJavaTimer.startTimer0();
			}
			return preemptTask;	
		}
		
		protected void programSchedulerTimer()
		{
			// timer must be started to schedule a next active task
			nxtTaskActivationTime.set(0,0,0);
			int i = 0;
			int nextTask = -1;
  </Fragment>
  <Fragment Aspects="PeriodicTiming">
			for(; i &lt; m_PeriodicListCount; i++)
			{
				if (m_PeriodicTaskList[i].isStarted()
					&amp;&amp; !m_PeriodicTaskList[i].isBlocked()
					&amp;&amp; !m_PeriodicTaskList[i].isFinished())
				{
					auxTaskActivationTime.set(m_PeriodicTaskList[i].getResumeTime());
					if (!nxtTaskActivationTime.isAssigned() || (auxTaskActivationTime.compareTo(nxtTaskActivationTime) &lt; 0))
						nxtTaskActivationTime.set(auxTaskActivationTime);
				}
			}
  </Fragment>
  <Fragment>
			if (nxtTaskActivationTime.isAssigned())
			{
				nxtTaskActivationTime.subtract(Clock.getTime());
				// set timeout to activate the preempt task
				FemtoJavaInterruptSystem.setEnable(0x2A);
				if (nxtTaskActivationTime.isGreaterThanZero())
					FemtoJavaTimer.setTimer0(nxtTaskActivationTime.convertToFJTimeoutValue());
				else
					// nxtTaskActivationTime is less or equal to current time, 
					// this means that a task is ready to execute, so scheduler must be 
					// executed as soon as possible...
					FemtoJavaTimer.setTimer0(200); 
				FemtoJavaTimer.startTimer0();
			}
		}
	}
  </Fragment>
</File>